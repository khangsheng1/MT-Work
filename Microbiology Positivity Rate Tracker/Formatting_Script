function main(workbook: ExcelScript.Workbook) {
  const monthNumber: number = 3; // Set the month number here (1 for January, 2 for February, etc.)
  const year: number = 2025; // Set the year here
  const monthName: string = getMonthName(monthNumber);
  const sheet = workbook.getActiveWorksheet();

  // Get the row count initially
  const lastRow: number = sheet.getUsedRange().getRowCount();

  // Step 1: Clear all formatting
  clearAllFormatting(sheet);

  // Step 1a: Delete the first three rows
  sheet.getRange("1:3").delete(ExcelScript.DeleteShiftDirection.up);

  // Step 2: Drop empty rows and remove rows containing specific keywords
  removeEmptyAndKeywordRows(sheet, sheet.getUsedRange().getRowCount());

  // Step 3: Insert empty rows above first instance of specific phrases
  insertEmptyRowsAbovePhrases(sheet, sheet.getUsedRange().getRowCount());

  // Step 4: Manipulate columns based on search terms and exclude terms
  manipulateColumns(sheet);

  // Step 5: Fill down values and populate Columns G, H, and I
  setupTabularData(sheet, monthName, monthNumber, year);
}

// Helper function to convert month number to month name
function getMonthName(monthNumber: number): string {
  const monthNames: string[] = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];
  return monthNames[monthNumber - 1] || "";
}

// Function to clear all formatting to default levels
function clearAllFormatting(sheet: ExcelScript.Worksheet) {
  const usedRange = sheet.getUsedRange();
  const format = usedRange.getFormat();
  const font = format.getFont();
  font.setBold(false);
  font.setItalic(false);
  font.setName("Calibri");
  font.setSize(11);
  format.getFill().clear();
  format.getBorders().forEach(border => border.setStyle(ExcelScript.BorderLineStyle.none));
}

// Function to remove empty rows and rows with specific keywords
function removeEmptyAndKeywordRows(sheet: ExcelScript.Worksheet, lastRow: number) {
  const phrasesToRemove: string[] = ["performing lab", "mercy"];
  const values: (string | number)[][] = sheet.getRange(`A1:A${lastRow}`).getValues();
  const deleteRows: number[] = [];

  for (let i = lastRow - 1; i >= 0; i--) {
    const cellValue = values[i][0]?.toString().trim().toLowerCase();
    if (!cellValue || phrasesToRemove.some(phrase => cellValue.includes(phrase))) {
      deleteRows.push(i + 1);
    }
  }
  deleteRows.forEach(row => sheet.getRange(`A${row}`).getEntireRow().delete(ExcelScript.DeleteShiftDirection.up));
}

// Function to insert empty rows above specific phrases, strictly matching only phrases in phrasesToInsertAbove
function insertEmptyRowsAbovePhrases(sheet: ExcelScript.Worksheet, lastRow: number) {
  const phrasesToInsertAbove: string[] = [
    "2019 Novel Coronavirus (COVID-19) PCR",
    "C difficile Detection", "GC/CHLAMYDIA,UROGENITAL",
    "GI PATHOGEN PCR PANEL", "Blood Culture Pathogen PCR Panel",
    "Influenza A/B and COVID-19 PCR Panel",
    "Influenza A/B, RSV and COVID-19 PCR Panel",
    "Meningitis Pathogen PCR Panel", "MRSA PCR",
    "Respiratory Pathogen PCR Panel", "Strep Group B Detection"
  ];

  const insertedRowsTracker = new Set<string>();

  // Iterate forward (from top down) to insert an empty row only above the first instance
  for (let i = 0; i < lastRow; i++) {
    const cellValue: string = sheet.getRange(`A${i + 1}`).getText().trim();

    // If the phrase has not been encountered before, insert a row
    if (phrasesToInsertAbove.includes(cellValue) && !insertedRowsTracker.has(cellValue)) {
      sheet.getRange(`A${i + 1}`).getEntireRow().insert(ExcelScript.InsertShiftDirection.down);
      insertedRowsTracker.add(cellValue);
      lastRow++; // Adjust row count to reflect the newly added row
    }
  }
}

// Function to manipulate columns ensuring only the first instance triggers searchTerms actions
function manipulateColumns(sheet: ExcelScript.Worksheet) {
  sheet.getRange("A:A").insert(ExcelScript.InsertShiftDirection.right);
  sheet.getRange("A:A").insert(ExcelScript.InsertShiftDirection.right);

  const searchTerms: string[] = [
    "Grand Total", "Total count of Value", "2019 Novel Coronavirus (COVID-19) PCR",
    "C difficile Detection", "GC/CHLAMYDIA,UROGENITAL", "GI PATHOGEN PCR PANEL",
    "Blood Culture Pathogen PCR Panel", "Influenza A/B and COVID-19 PCR Panel",
    "Influenza A/B, RSV and COVID-19 PCR Panel", "Meningitis Pathogen PCR Panel",
    "MRSA PCR", "Respiratory Pathogen PCR Panel", "Strep Group B Detection"
  ];
  const excludeTerms: string[] = [
    "Not Detected", "Detected", "No nucleic acids detected.",
    "Presumptive Negative", "Presumptive Positive", "Positive",
    "Negative", "Pass", "MRSA detected", "MRSA not detected",
    "No respiratory pathogen nucleic acids detected.",
    "Aerobic Bottle", "Anaerobic Bottle", "Pediatric Bottle"
  ];

  const valuesC: (string | number)[][] = sheet.getRange("C1:C400").getValues();
  const valuesD: (string | number)[][] = sheet.getRange("D1:D400").getValues();
  const processedTerms = new Set<string>();

  for (let i = 0; i < valuesC.length; i++) {
    const cellValueC = valuesC[i][0]?.toString();
    const cellValueD = valuesD[i][0]?.toString();

    if (searchTerms.includes(cellValueC) && !processedTerms.has(cellValueC)) {
      sheet.getRange(`A${i + 1}`).setValue(cellValueC);
      sheet.getRange(`C${i + 1}`).clear();
      if (cellValueD && !excludeTerms.includes(cellValueC)) {
        sheet.getRange(`F${i + 1}`).setValue(cellValueD);
        sheet.getRange(`D${i + 1}`).clear();
      }
      processedTerms.add(cellValueC);
    } else if (!excludeTerms.includes(cellValueC) && cellValueC) {
      sheet.getRange(`B${i + 1}`).setValue(cellValueC);
      sheet.getRange(`C${i + 1}`).clear();
    }
  }

  sheet.getRange("D1").setValue("Test Results Count");
  sheet.getRange("E1").setValue("Results Percentage");
  sheet.getRange("F1").setValue("# of Panel Tests Performed");
}

// Function to set up tabular data
function setupTabularData(sheet: ExcelScript.Worksheet, monthName: string, monthNumber: number, year: number) {
  function fillDownValues(column: string) {
    const range = sheet.getRange(`${column}1:${column}${sheet.getUsedRange().getRowCount()}`);
    const values: (string | number)[][] = range.getValues();

    for (let i = 1; i < values.length; i++) {
      if (values[i][0] === "" && values[i - 1][0] !== "") {
        values[i][0] = values[i - 1][0];
      }
    }
    range.setValues(values);
  }

  fillDownValues("A");
  fillDownValues("B");
  fillDownValues("F");

  const lastRow: number = sheet.getUsedRange().getRowCount();
  const rangeG = sheet.getRange(`G1:G${lastRow}`);
  const rangeH = sheet.getRange(`H1:H${lastRow}`);
  const rangeI = sheet.getRange(`I1:I${lastRow}`);
  const valuesG: string[][] = Array(lastRow).fill([monthName]);
  const valuesH: number[][] = Array(lastRow).fill([year]);
  const valuesI: number[][] = Array(lastRow).fill([monthNumber]);

  rangeG.setValues(valuesG);
  rangeH.setValues(valuesH);
  rangeI.setValues(valuesI);

  for (let i = lastRow - 1; i >= 0; i--) {
    const rowValues: (string | number)[] = sheet.getRange(`A${i + 1}:I${i + 1}`).getValues()[0];
    if (rowValues.some(cell => cell === "")) {
      sheet.getRange(`A${i + 1}:I${i + 1}`).delete(ExcelScript.DeleteShiftDirection.up);
    }
  }

  sheet.getRange(`A1:I${lastRow}`).setNumberFormatLocal("General");
}
